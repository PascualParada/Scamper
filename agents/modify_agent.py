from typing import List
from models.schemas import UserInput, ScamperResult, ScamperTechnique
from utils.gemini_client import gemini_client

class ModifyAgent:
    """Agente especializado en la t√©cnica SCAMPER de MODIFICAR/MAGNIFICAR"""
    
    def __init__(self):
        self.name = "Modify Agent"
        self.technique = ScamperTechnique.MODIFY
        self.description = "Especialista en modificar, amplificar, reducir e intensificar elementos"
    
    async def generate_ideas(self, user_input: UserInput) -> ScamperResult:
        """
        Genera ideas usando la t√©cnica MODIFICAR
        
        Args:
            user_input: Entrada del usuario con problema y contexto
            
        Returns:
            Resultado con ideas de modificaci√≥n
        """
        print(f"üîß {self.name}: Explorando modificaciones y amplificaciones...")
        
        try:
            # Generar ideas espec√≠ficas de modificaci√≥n
            ideas = await gemini_client.generate_scamper_ideas(
                technique=self.technique.value,
                problem=user_input.problem,
                context=user_input.context
            )
            
            # Crear explicaci√≥n especializada
            explanation = self._create_explanation(user_input.problem)
            
            result = ScamperResult(
                technique=self.technique,
                ideas=ideas,
                explanation=explanation
            )
            
            print(f"‚úÖ {self.name}: {len(ideas)} ideas de modificaci√≥n generadas")
            return result
            
        except Exception as e:
            print(f"‚ùå {self.name}: Error generando ideas - {e}")
            return ScamperResult(
                technique=self.technique,
                ideas=[f"Error en agente de modificaci√≥n: {str(e)}"],
                explanation="No se pudieron generar ideas de modificaci√≥n debido a un error t√©cnico."
            )
    
    def _create_explanation(self, problem: str) -> str:
        """Crea explicaci√≥n espec√≠fica para la t√©cnica MODIFICAR"""
        return f"""El Agente de Modificaci√≥n analiz√≥ '{problem}' pregunt√°ndose:
        
‚Ä¢ ¬øQu√© aspectos se pueden amplificar o hacer m√°s grandes/intensos?
‚Ä¢ ¬øQu√© elementos se pueden reducir o minimizar para mayor eficiencia?
‚Ä¢ ¬øQu√© caracter√≠sticas se pueden hacer m√°s r√°pidas, lentas, fuertes o suaves?
‚Ä¢ ¬øQu√© componentes se pueden exagerar o suavizar estrat√©gicamente?

Esta t√©cnica busca optimizar mediante cambios de escala, intensidad y proporci√≥n."""

    def get_capabilities(self) -> dict:
        """Retorna las capacidades del agente"""
        return {
            "agent_name": self.name,
            "technique": self.technique.value,
            "specialization": "Optimizaci√≥n mediante modificaci√≥n de escalas",
            "focus_areas": [
                "Amplificaci√≥n estrat√©gica",
                "Reducci√≥n eficiente",
                "Intensificaci√≥n de caracter√≠sticas",
                "Cambios de velocidad/ritmo",
                "Ajustes de proporci√≥n"
            ]
        }

# Instancia global del agente
modify_agent = ModifyAgent()