import asyncio
from typing import Optional
from models.schemas import UserInput, ScamperResponse
from agents.orchestrator import orchestrator

class ScamperChatbot:
    """Interfaz conversacional para el sistema SCAMPER"""
    
    def __init__(self):
        self.name = "SCAMPER Assistant"
        self.session_active = False
    
    def welcome_message(self) -> str:
        """Mensaje de bienvenida"""
        return """
üéØ ¬°Hola! Soy tu asistente SCAMPER para potenciar tu creatividad.

SCAMPER es una t√©cnica que te ayuda a generar ideas innovadoras atrav√©s de 7 enfoques:
‚Ä¢ SUSTITUIR: ¬øQu√© se puede reemplazar?
‚Ä¢ COMBINAR: ¬øQu√© se puede fusionar?
‚Ä¢ ADAPTAR: ¬øQu√© se puede adaptar de otros contextos?
‚Ä¢ MODIFICAR: ¬øQu√© se puede amplificar o reducir?
‚Ä¢ OTROS USOS: ¬øPara qu√© m√°s se puede usar?
‚Ä¢ ELIMINAR: ¬øQu√© se puede simplificar?
‚Ä¢ INVERTIR: ¬øQu√© se puede reorganizar?

Describe tu problema o desaf√≠o creativo y yo aplicar√© todas las t√©cnicas SCAMPER para generar ideas innovadoras.

¬øCu√°l es el problema o desaf√≠o en el que necesitas ayuda?
        """
    
    async def start_conversation(self):
        """Inicia una conversaci√≥n interactiva con el usuario"""
        print(self.welcome_message())
        self.session_active = True
        
        while self.session_active:
            try:
                # Obtener entrada del usuario
                user_input = await self._get_user_input()
                
                if user_input is None:
                    continue
                
                # Procesar con SCAMPER
                print("\nüöÄ Aplicando t√©cnicas SCAMPER...")
                print("=" * 50)
                
                response = await orchestrator.process_user_input(user_input)
                
                # Mostrar resultados
                self._display_results(response)
                
                # Preguntar si quiere continuar
                if not self._ask_continue():
                    self.session_active = False
                    print("\nüëã ¬°Gracias por usar SCAMPER! ¬°Que tengas mucho √©xito con tus ideas!")
                
            except KeyboardInterrupt:
                print("\n\nüëã ¬°Hasta luego!")
                self.session_active = False
            except Exception as e:
                print(f"\n‚ùå Error inesperado: {e}")
                print("Intenta de nuevo...")
    
    async def _get_user_input(self) -> Optional[UserInput]:
        """Obtiene y valida la entrada del usuario"""
        
        # Obtener problema principal
        print("\n" + "=" * 50)
        problem = input("üìù Describe tu problema o desaf√≠o: ").strip()
        
        if not problem:
            print("‚ö†Ô∏è  Por favor, describe un problema v√°lido.")
            return None
        
        if len(problem) < 10:
            print("‚ö†Ô∏è  Por favor, proporciona m√°s detalles (m√≠nimo 10 caracteres).")
            return None
        
        # Obtener contexto opcional
        print("\nüí° Contexto adicional (opcional):")
        print("   Ejemplos: industria, p√∫blico objetivo, limitaciones, etc.")
        context = input("üîç Contexto: ").strip()
        
        context = context if context else None
        
        return UserInput(problem=problem, context=context)
    
    def _display_results(self, response: ScamperResponse):
        """
        Muestra los resultados de forma organizada y atractiva.

        **NOTA IMPORTANTE PARA DESARROLLADORES DE GUI:**
        Este m√©todo est√° dise√±ado EXCLUSIVAMENTE para la salida en la interfaz de
        l√≠nea de comandos (CLI) utilizando la funci√≥n `print()`.
        NO DEBE SER UTILIZADO por una aplicaci√≥n GUI para mostrar resultados.
        Las GUIs deben tomar el objeto `ScamperResponse` (preferiblemente obtenido
        a trav√©s de `main.py:get_scamper_ideas_for_gui`) y renderizar los datos
        utilizando sus propios componentes y l√≥gica de UI.
        """
        
        print(f"\nüéØ PROBLEMA ANALIZADO:")
        print(f"   {response.original_problem}")
        print("\n" + "=" * 70)
        print("üöÄ IDEAS GENERADAS CON SCAMPER")
        print("=" * 70)
        
        # Mostrar cada t√©cnica con sus ideas
        for i, result in enumerate(response.results, 1):
            technique_name = self._get_technique_display_name(result.technique.value)
            
            print(f"\n{i}. üîß {technique_name}")
            print("-" * 50)
            print(f"üí≠ {result.explanation}")
            print("\nüí° Ideas generadas:")
            
            for j, idea in enumerate(result.ideas, 1):
                print(f"   {j}. {idea}")
        
        # Mostrar resumen
        print("\n" + "=" * 70)
        print("üìä RESUMEN EJECUTIVO")
        print("=" * 70)
        print(f"‚ú® {response.summary}")
        
        # Estad√≠sticas
        total_ideas = sum(len(result.ideas) for result in response.results)
        successful_techniques = len([r for r in response.results if not any("Error" in idea for idea in r.ideas)])
        
        print(f"\nüìà ESTAD√çSTICAS:")
        print(f"   ‚Ä¢ Total de ideas generadas: {total_ideas}")
        print(f"   ‚Ä¢ T√©cnicas aplicadas exitosamente: {successful_techniques}/7")
        print(f"   ‚Ä¢ Promedio de ideas por t√©cnica: {total_ideas/7:.1f}")
    
    def _get_technique_display_name(self, technique: str) -> str:
        """Convierte el nombre t√©cnico a nombre para mostrar"""
        display_names = {
            "substitute": "SUSTITUIR - Reemplazar elementos",
            "combine": "COMBINAR - Fusionar ideas",
            "adapt": "ADAPTAR - Aplicar de otros contextos", 
            "modify": "MODIFICAR - Amplificar o reducir",
            "put_to_other_uses": "OTROS USOS - Nuevas aplicaciones",
            "eliminate": "ELIMINAR - Simplificar",
            "reverse": "INVERTIR - Reorganizar o hacer al rev√©s"
        }
        return display_names.get(technique, technique.upper())
    
    def _ask_continue(self) -> bool:
        """Pregunta si el usuario quiere continuar"""
        print("\n" + "=" * 50)
        while True:
            choice = input("¬øQuieres analizar otro problema? (s/n): ").strip().lower()
            if choice in ['s', 's√≠', 'si', 'y', 'yes']:
                return True
            elif choice in ['n', 'no']:
                return False
            else:
                print("‚ö†Ô∏è  Por favor, responde 's' para s√≠ o 'n' para no.")
    
    async def process_single_problem(self, problem: str, context: Optional[str] = None) -> ScamperResponse:
        """
        Procesa un problema √∫nico sin interfaz interactiva.

        Este m√©todo es √∫til para uso program√°tico, por ejemplo, si se integra
        con una GUI u otro sistema.

        Args:
            problem: El problema o desaf√≠o a analizar.
            context: Contexto adicional opcional para el problema.

        Returns:
            Un objeto `ScamperResponse` que contiene los resultados del an√°lisis SCAMPER.
            El llamador es responsable de manejar la naturaleza as√≠ncrona de esta funci√≥n
            (por ejemplo, usando `await` en un contexto `async` o `asyncio.run()`).
        """
        user_input = UserInput(problem=problem, context=context)
        return await orchestrator.process_user_input(user_input)

# Instancia global del chatbot
chatbot = ScamperChatbot()
